[
  {
    "objectID": "MP00.html",
    "href": "MP00.html",
    "title": "Will Peters STA9750-2024-FALL",
    "section": "",
    "text": "Hello,\nThank you for having a look at my Website\nIf you want to know more about me, feel free to check out my Linkedin\nThis will be further updated as we go along further."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Will Peters STA9750-2024-FALL",
    "section": "",
    "text": "Hello,\nThank you for having a look at my Website\nIf you want to know more about me, feel free to check out my Linkedin\nThis will be further updated as we go along further."
  },
  {
    "objectID": "MP02.html",
    "href": "MP02.html",
    "title": "Will Peters STA9750-2024-FALL MP02",
    "section": "",
    "text": "Initially we start by installing all the libraries for R if you are interested in utilizing, and running it on your own.\n\nlibrary(scales) \nlibrary(stringr) \nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::lag()        masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr) \nlibrary(foreach)\n\n\nAttaching package: 'foreach'\n\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n\nlibrary(doParallel)\n\nLoading required package: iterators\nLoading required package: parallel\n\nlibrary(ggplot2) \nlibrary(tidyr) \nlibrary(plotly) \n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(knitr)\n\nNext we install a function to download the data sources from the imdb website and running it across the different file names as below. This generates the parameter of Base_url, Fname_ext and FILE_URL and the function of get_imdb_file with the input being the fname you see below.\n\nget_imdb_file &lt;- function(fname){ \n  BASE_URL &lt;- \"https://datasets.imdbws.com/\" \n  fname_ext &lt;- paste0(fname, \".tsv.gz\") \n  if(!file.exists(fname_ext)){ \n    FILE_URL &lt;- paste0(BASE_URL, fname_ext) \n    download.file(FILE_URL, \n                  destfile = fname_ext) \n  } \n  as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE)) \n  }\n\nTITLE_RATINGS &lt;- get_imdb_file(\"title.ratings\") |&gt; filter(numVotes &gt;= 100)\n\nRows: 1490228 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): tconst\ndbl (2): averageRating, numVotes\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n'TITLE_PRINCIPALS &lt;- get_imdb_file(\"title.principals\") |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst))'\n\n[1] \"TITLE_PRINCIPALS &lt;- get_imdb_file(\\\"title.principals\\\") |&gt; semi_join(TITLE_RATINGS, join_by(tconst == tconst))\"\n\nTITLE_PRINCIPALS &lt;- as.data.frame(readr::read_csv(\"title_principals_small.csv\", lazy=FALSE))\n\nRows: 6586689 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): tconst, nconst, category, job, characters\ndbl (1): ordering\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nTITLE_BASICS &lt;- get_imdb_file(\"title.basics\") \n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 11176312 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (8): tconst, titleType, primaryTitle, originalTitle, startYear, endYear,...\ndbl (1): isAdult\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt; \n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\nTITLE_CREW &lt;- get_imdb_file(\"title.crew\") \n\nRows: 10517985 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (3): tconst, directors, writers\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nTITLE_CREW &lt;- TITLE_CREW |&gt; \n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\nTITLE_EPISODES &lt;- get_imdb_file(\"title.episode\") \n\nRows: 8583561 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (4): tconst, parentTconst, seasonNumber, episodeNumber\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt; \n  semi_join(TITLE_RATINGS, join_by(tconst == tconst)) \nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt; \n  semi_join(TITLE_RATINGS, join_by(parentTconst == tconst))\n\nNAME_BASICS &lt;- get_imdb_file(\"name.basics\") \n\nRows: 13886887 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (6): nconst, primaryName, birthYear, deathYear, primaryProfession, known...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nNAME_BASICS &lt;- NAME_BASICS |&gt; filter(str_count(knownForTitles,\",\") &gt; 1)\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1, TITLE_EPISODES_2) |&gt; distinct() \n\nThe purpose of the below lines is to remove the components of the TITLE_EPISODES as the bit of code above binds it into the data total.\n\nrm(TITLE_EPISODES_1) \nrm(TITLE_EPISODES_2)\n\nThe mutating feature is transforming the columns and providing the datatype such that it will be easier to read and transform later. Task 1\n\nNAME_BASICS &lt;- NAME_BASICS |&gt; \n  mutate(birthYear = as.numeric(birthYear), \n         deathYear = as.numeric(deathYear)) \n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `birthYear = as.numeric(birthYear)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt; \n  mutate(startYear = as.numeric(startYear), \n         endYear = as.numeric(endYear),\n         runtimeMinutes = as.numeric(runtimeMinutes), \n         isAdult = as.logical(isAdult))\n\nWarning: There were 3 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `startYear = as.numeric(startYear)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\n\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt; \n  mutate(seasonNumber = as.numeric(seasonNumber), \n         episodeNumber = as.numeric(episodeNumber))\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `seasonNumber = as.numeric(seasonNumber)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt; \n  mutate(ordering = as.numeric(ordering))\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt; \n  mutate(averageRating = as.numeric(averageRating), \n         numVotes = as.numeric(numVotes))\n\nprint(TITLE_BASICS |&gt; \n        count(titleType, name = \"Countrows\")|&gt;\n        rename(Type=titleType,'Number of media'=Countrows))\n\n           Type Number of media\n1         movie          132336\n2         short           16735\n3     tvEpisode          156904\n4  tvMiniSeries            5939\n5       tvMovie           15056\n6      tvSeries           30021\n7       tvShort             410\n8     tvSpecial            3066\n9         video            9347\n10    videoGame            4693\n\n\nTask 2\n1.\nAnswer is in our data set there are 132,171 Movies, 29,964 TV Series and 156,592 Episodes\n2.\n\nkable(NAME_BASICS |&gt; \n         filter (is.na(deathYear),birthYear&gt;1906) |&gt; \n         arrange(birthYear) |&gt; \n         rename(Name = primaryName, Year_of_Birth = birthYear,Year_of_Death = deathYear,Profession = primaryProfession) |&gt;\n         select(-Profession,-nconst,-knownForTitles) |&gt;\n         head(10),align = \"l\") \n\n\n\n\nName\nYear_of_Birth\nYear_of_Death\n\n\n\n\nAlberto Albani Barbieri\n1907\nNA\n\n\nYevdokiya Alekseyeva\n1907\nNA\n\n\nMalcolm Baker-Smith\n1907\nNA\n\n\nVineta Bastian-Klinger\n1907\nNA\n\n\nGretel Berndt\n1907\nNA\n\n\nEdgar Blatt\n1907\nNA\n\n\nRonald Brantford\n1907\nNA\n\n\nElisa Carreira\n1907\nNA\n\n\nHemchandra Chunder\n1907\nNA\n\n\nJohn Clein\n1907\nNA\n\n\n\n\n\nThe data is showing the list of 10 people as being the oldest living under the assumption that the death year NA is accurate, as the oldest living person was born in 1907. Overall inaccurate, it would require an additional data source to validate the information’\n‘3.’\n\nkable (TITLE_RATINGS |&gt; \n         filter(averageRating == 10.0,numVotes &gt;= 200000) |&gt; \n         inner_join(TITLE_BASICS |&gt; \n              select(tconst,primaryTitle),join_by(tconst == tconst)) |&gt;\n         rename(EpisodeTitle = primaryTitle) |&gt; \n         inner_join(TITLE_EPISODES |&gt; \n              select(tconst,parentTconst),join_by(tconst == tconst)) |&gt;\n         inner_join(TITLE_BASICS |&gt; \n              select(tconst,primaryTitle),join_by(parentTconst == tconst)) |&gt;  \n         rename(SeriesTitle = primaryTitle) |&gt;\n         select(-tconst,-parentTconst) |&gt;\n         rename(Rating = averageRating,'Number of votes' = numVotes,Episode=EpisodeTitle,Series=SeriesTitle),align = \"l\")\n\n\n\n\nRating\nNumber of votes\nEpisode\nSeries\n\n\n\n\n10\n230179\nOzymandias\nBreaking Bad\n\n\n\n\n\n‘As you can see with a huge 230,000 votes it is the episode Ozymandis in the series Breaking Bad that received a perfect 10’\n‘4.’\n\nkable(NAME_BASICS |&gt; \n         filter(primaryName == \"Mark Hamill\") |&gt; \n         separate_longer_delim(knownForTitles,\",\") |&gt; \n         inner_join(TITLE_RATINGS,join_by(knownForTitles == tconst)) |&gt; \n         inner_join(TITLE_BASICS |&gt; \n               select(tconst,primaryTitle),join_by(knownForTitles == tconst)) |&gt; \n         arrange(desc(numVotes)) |&gt;\n         select(-nconst,-birthYear,-deathYear,-primaryProfession,-knownForTitles) |&gt;\n         rename(Name = primaryName,Rating = averageRating,'Number of Votes' = numVotes,Title=primaryTitle),align=\"l\")\n\n\n\n\n\n\n\n\n\n\nName\nRating\nNumber of Votes\nTitle\n\n\n\n\nMark Hamill\n8.6\n1475025\nStar Wars: Episode IV - A New Hope\n\n\nMark Hamill\n8.7\n1406127\nStar Wars: Episode V - The Empire Strikes Back\n\n\nMark Hamill\n8.3\n1140557\nStar Wars: Episode VI - Return of the Jedi\n\n\nMark Hamill\n6.9\n682965\nStar Wars: Episode VIII - The Last Jedi\n\n\n\n\n\n‘My argument for this would be the Starwars episodes are Mark Hamills primary claim to fame, specifically Episode, 4,5, 6 and 8 in that order’\n‘5.’\n\nkable(TITLE_EPISODES |&gt; \n        count(parentTconst, name = \"Countrows\") |&gt; \n        filter(Countrows &gt;= 12) |&gt; \n        inner_join(TITLE_BASICS |&gt; \n               filter(titleType == \"tvSeries\")|&gt; \n               select (primaryTitle,tconst), join_by(parentTconst == tconst))|&gt; \n        inner_join(TITLE_RATINGS,join_by (parentTconst == tconst)) |&gt; \n        arrange(desc(averageRating)) |&gt; \n        select(-parentTconst) |&gt;\n        rename('Number of episodes'=Countrows,'Tv series'=primaryTitle,'Number of votes'=numVotes,Rating=averageRating)  |&gt;\n        head(10),align = \"l\")\n\n\n\n\nNumber of episodes\nTv series\nRating\nNumber of votes\n\n\n\n\n101\nJogandofoddaci\n9.8\n178\n\n\n318\nCraft Games\n9.7\n150\n\n\n134\nChoufli Hal\n9.7\n2930\n\n\n212\nPrime Time\n9.7\n181\n\n\n74\nFriday Five Sharp\n9.7\n4516\n\n\n66\nFreaking Fucking Games\n9.6\n136\n\n\n238\nMarmadesam\n9.6\n907\n\n\n171\nOneyPlays\n9.6\n226\n\n\n170\nThe Why Files\n9.6\n868\n\n\n12\nArkadas Canlisi\n9.6\n4185\n\n\n\n\n\n‘Tied for first would be Craft games, Jogandofoddaci, Chofli Hal, Prime time and Friday Five Sharp each having over 50 episodes but low vote counts’\n‘6.’\n\nGRAPH_INFORMATION &lt;- TITLE_BASICS |&gt; \n  filter(primaryTitle == \"Happy Days\") |&gt; \n  inner_join(TITLE_EPISODES,join_by (tconst == parentTconst)) |&gt; \n  inner_join (TITLE_RATINGS,join_by (tconst.y == tconst))\n\nggplot(GRAPH_INFORMATION,aes(x = seasonNumber, y = averageRating)) + \n  geom_point(color = \"blue\", size = 3) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  labs(title=\"Happy Days Seasonal performance\", x = \"Season\", y = \"Rating\") + \n  theme_classic()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n‘From this analysis we can see that the data tended to be on a seasonal decline, however my argument would be that Season 7,8 were the lowest points and then went out with better episodes in season 12’\n‘Task 3 I am going to be saying the success metrics is the rounded average rating such that 5.4 is treated as 5 and 5.6 is treated as 6 added with the number of digits in the votes’\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt; \n  mutate(Success_measure = round(averageRating) + ceiling(log10(abs(numVotes))))\n\n‘I have created a separe dataset for the list of successful movies with wider details to not show too much information’\n\nSuccessful_Movies &lt;- TITLE_RATINGS |&gt;\n  inner_join(TITLE_BASICS |&gt; \n               filter(titleType == \"movie\"), join_by(tconst == tconst)) |&gt; \n  arrange(desc(Success_measure),desc(averageRating))\n\n‘3.1’\n\nkable(Successful_Movies |&gt; \n        select(-tconst,-titleType,-originalTitle,-isAdult,-endYear,-runtimeMinutes,-genres) |&gt;\n        head(5)|&gt;\n        rename(Rating = averageRating,'Number of votes'=numVotes,'Success measure' = Success_measure,Title=primaryTitle,'Release Year' = startYear),align = \"l\")\n\n\n\n\n\n\n\n\n\n\n\nRating\nNumber of votes\nSuccess measure\nTitle\nRelease Year\n\n\n\n\n9.3\n2953606\n16\nThe Shawshank Redemption\n1994\n\n\n9.2\n2059043\n16\nThe Godfather\n1972\n\n\n9.0\n1391342\n16\nThe Godfather Part II\n1974\n\n\n9.0\n1481655\n16\nSchindler’s List\n1993\n\n\n9.0\n2022057\n16\nThe Lord of the Rings: The Return of the King\n2003\n\n\n\n\n\n‘The top 5 movies were The Shawshank Redemption, The Godfather, The Godfather Part II, Schindlers List, The Lord of the Rings: The Return of the King all of which were iconic movies and box office successes’\n‘3.2’\n\nkable(TITLE_RATINGS |&gt;\n        filter(numVotes &gt;= 10000) |&gt; \n        inner_join(TITLE_BASICS |&gt; \n                     filter(titleType == \"movie\"), join_by(tconst == tconst)) |&gt; \n        arrange(Success_measure,averageRating) |&gt; \n        head(5)|&gt;\n        select(-tconst,-originalTitle,-titleType,-isAdult,-endYear,-runtimeMinutes,-genres)|&gt;\n        rename(Rating = averageRating,'Number of Votes' = numVotes,'Success Measure' = Success_measure,Title = primaryTitle,'Release Year' = startYear), align = \"l\")\n\n\n\n\n\n\n\n\n\n\n\nRating\nNumber of Votes\nSuccess Measure\nTitle\nRelease Year\n\n\n\n\n1.0\n10212\n6\n321 Action\n2020\n\n\n1.0\n74159\n6\nReis\n2017\n\n\n1.0\n39461\n6\nCumali Ceber: Allah Seni Alsin\n2017\n\n\n1.2\n14932\n6\nDaniel the Wizard\n2004\n\n\n1.2\n20685\n6\n15/07: Break of Dawn\n2021\n\n\n\n\n\n‘Given my metrics I came up with 321 Action (10210 Votes 1.0 rating success measure of 6),Reis (74155 votes,1 Average Rating, success measure of 6) and Cumali Ceber: Allah Seni Alsin (39456 votes, 1 average rating, success measure of 6)’\n‘3.3’\n‘For my actor I selected Brad Pitt and a score above 11’\n\nkable(NAME_BASICS |&gt; \n        filter(primaryName == \"Brad Pitt\") |&gt; \n        separate_longer_delim(knownForTitles, \",\") |&gt; \n        inner_join(TITLE_RATINGS |&gt; \n            filter(Success_measure &gt;= \"10\"), join_by(knownForTitles == tconst)) |&gt;\n        inner_join(TITLE_BASICS |&gt; \n            select(primaryTitle,tconst), join_by(knownForTitles == tconst))|&gt;\n      select(-nconst,-knownForTitles,-deathYear,-primaryProfession)|&gt;\n        rename(Name = primaryName,'Year of Birth' = birthYear,Rating = averageRating,'Number of Votes' = numVotes,'Success measure' = Success_measure,Title=primaryTitle),align=\"l\")\n\n\n\n\n\n\n\n\n\n\n\n\nName\nYear of Birth\nRating\nNumber of Votes\nSuccess measure\nTitle\n\n\n\n\nBrad Pitt\n1963\n8.8\n2385636\n16\nFight Club\n\n\nBrad Pitt\n1963\n6.5\n552901\n12\nMr. & Mrs. Smith\n\n\nBrad Pitt\n1963\n7.6\n474560\n14\nMoneyball\n\n\nBrad Pitt\n1963\n8.0\n654805\n14\n12 Monkeys\n\n\n\n\n\n‘Brad Pitt has been in 4 movies above 10 success points with the 4 being Fight Club, Moneyball, 12 Monkeys, Mr & Mrs Smith’\n‘3.4’\n‘The spot check validation is average Ratings above 9 and lowest success_measure (i.e.minimal view)’\n\nkable(TITLE_RATINGS |&gt; \n        filter(Success_measure &lt;= 12) |&gt; \n        filter(averageRating &gt;= 9) |&gt; \n        inner_join(TITLE_BASICS |&gt; \n        filter(titleType == \"movie\"), join_by(tconst == tconst)) |&gt; \n        arrange(numVotes,Success_measure,desc(averageRating)) |&gt; \n        select(-tconst,-titleType,-originalTitle,-isAdult,-endYear,-runtimeMinutes,-genres) |&gt;\n        rename('Release year' = startYear, Title = primaryTitle,Rating = averageRating,'Success measure' = Success_measure,'Number of votes' = numVotes) |&gt;\n        head(3),align = \"l\")\n\n\n\n\n\n\n\n\n\n\n\nRating\nNumber of votes\nSuccess measure\nTitle\nRelease year\n\n\n\n\n9.9\n100\n12\nYou Are the Apple of My Eye\n2024\n\n\n9.8\n100\n12\nPop Lock ’n Roll\n2016\n\n\n9.6\n100\n12\nAramudaitha Kombu\n2023\n\n\n\n\n\n‘The three movies were Aramudaitha Kombu, Carving the Divie and Pop Lock n Roll which I have never heard of and so did not perform well in terms of the success measure that I crafted’\n‘3.5’\n‘I think a numerical threshold for a project to be a success is if the success criteria is above 14 because that means that either the project got above 9.5 and 1000+ reviews or over a million reviews and was above a 6.5 average rating.’\n‘Task 4’\n‘for this one genre is aggregated with each title potentially having multiple genres to treat this we are going to include a table with each row being a genre per movie’\n‘Had to also remove nulls’\n\nTITLE_BASICS_GENRE &lt;- TITLE_BASICS |&gt; \n  separate_longer_delim(genres, \",\") |&gt;\n  filter(titleType == \"movie\") |&gt; \n  inner_join(TITLE_RATINGS |&gt; \n               select (Success_measure,tconst), join_by(tconst == tconst)) |&gt;\n  filter(Success_measure &gt;= 14) |&gt; \n  mutate(decade=round(startYear,-1))\n\n\ngenre_counts &lt;- TITLE_BASICS_GENRE |&gt; \n  group_by(decade, genres) |&gt; \n  summarize(count = n())\n\n`summarise()` has grouped output by 'decade'. You can override using the\n`.groups` argument.\n\n\n‘Added a filter to only show where count over 12 so to not over lap it’\n\nggplot(genre_counts, aes(x = decade, y = count, fill = genres)) +\n           geom_bar(stat = \"identity\") + \n           geom_text(aes(label = ifelse(count &gt; 12, count, \"\")), position =                  position_stack(vjust = 0.5)) + \n           labs(title = \"Number of Movies by Genre and Decade\") + \n           xlab(\"Decade\") + \n           ylab(\"Number of Movies\") + \n           scale_x_continuous(breaks = seq(1920, 2020, by = 10), labels = paste0            (seq(1920, 2020, by = 10), \"s\")) + \n           ggtitle(label = \"Number of Movies by Genre and Decade\")\n\n\n\n\n\n\n\n\n‘Drama seems to be the most successful from 1920-2020’\n\ntotal_successes &lt;- genre_counts |&gt; \n  group_by(decade) |&gt; \n  summarize(total_success = sum(count))\n\n\ngenre_counts_total &lt;- genre_counts |&gt; \n  left_join(total_successes, by = \"decade\") |&gt; \n  mutate(percentage_of_count = count/total_success)\n\n\nggplot(genre_counts_total, aes(x = decade, y = percentage_of_count, color = genres,group = genres, text = paste0(round(percentage_of_count*100, 0), \"%\"))) +\n           geom_line() + \n           geom_point() + \n           labs(title = \"Percentage of Total Successes by Genre and Year\", x = \"Year\", y = \"Percentage of Total Successes\") + \n           scale_x_continuous(breaks = seq(1920, 2020, by = 10), labels = paste0(seq(1920, 2020, by = 10), \"s\")) + \n           scale_y_continuous(labels = scales::percent) + ggtitle(label = \"Number of Movies by Genre and Decade\")\n\n\n\n\n\n\n\n\n‘4.2’ ‘I would claim the genre that has had the most consistent success movies would be Drama movies always being more than 20% of the share of successful movies by decade’ ‘I would claim that the genre that fell out of favor the most is Romance, as in 1930 it had a 20% share of the success movies however that has dropped to 3% in the 2020s’\n‘4.3 Drama has produced the most successes in 2010s and 2020s, primarily driven by the sheer volume although not having a bad success conversion of movies, the conversion tends to be middle of the pack when compared to other genres’\n\nkable(TITLE_BASICS |&gt; \n         separate_longer_delim(genres, \",\") |&gt; \n         filter(titleType == \"movie\") |&gt; \n         inner_join(TITLE_RATINGS |&gt; \n         select (Success_measure,tconst), join_by(tconst == tconst)) |&gt; \n         mutate(Success=Success_measure &gt;= 14) |&gt; \n         mutate(decade=round(startYear,-1)) |&gt; \n         filter(decade &gt;= 2010) |&gt; \n         group_by(decade,genres) |&gt; \n         summarize(movies = n(), successful_movies = sum(Success==TRUE)) |&gt;\n         mutate(percentage_success = percent(successful_movies/movies)) |&gt;\n         filter(successful_movies != 0)) \n\n`summarise()` has grouped output by 'decade'. You can override using the\n`.groups` argument.\n\n\n\n\n\ndecade\ngenres\nmovies\nsuccessful_movies\npercentage_success\n\n\n\n\n2010\nAction\n3745\n61\n1.629%\n\n\n2010\nAdventure\n1925\n50\n2.597%\n\n\n2010\nAnimation\n855\n20\n2.339%\n\n\n2010\nBiography\n1268\n32\n2.524%\n\n\n2010\nComedy\n8816\n42\n0.476%\n\n\n2010\nCrime\n2953\n38\n1.287%\n\n\n2010\nDrama\n14322\n144\n1.005%\n\n\n2010\nFamily\n1359\n10\n0.736%\n\n\n2010\nFantasy\n1120\n20\n1.786%\n\n\n2010\nHistory\n984\n8\n0.813%\n\n\n2010\nHorror\n3465\n6\n0.173%\n\n\n2010\nMusic\n807\n2\n0.248%\n\n\n2010\nMusical\n302\n2\n0.662%\n\n\n2010\nMystery\n1599\n28\n1.751%\n\n\n2010\nRomance\n3925\n22\n0.561%\n\n\n2010\nSci-Fi\n958\n21\n2.192%\n\n\n2010\nSport\n532\n5\n0.940%\n\n\n2010\nThriller\n3760\n34\n0.904%\n\n\n2010\nWar\n410\n7\n1.707%\n\n\n2010\nWestern\n105\n2\n1.905%\n\n\n2020\nAction\n5542\n61\n1.1007%\n\n\n2020\nAdventure\n2787\n47\n1.6864%\n\n\n2020\nAnimation\n1264\n20\n1.5823%\n\n\n2020\nBiography\n2011\n29\n1.4421%\n\n\n2020\nComedy\n11448\n44\n0.3843%\n\n\n2020\nCrime\n4107\n27\n0.6574%\n\n\n2020\nDocumentary\n5421\n3\n0.0553%\n\n\n2020\nDrama\n19861\n125\n0.6294%\n\n\n2020\nFamily\n1858\n3\n0.1615%\n\n\n2020\nFantasy\n1610\n10\n0.6211%\n\n\n2020\nHistory\n1461\n12\n0.8214%\n\n\n2020\nHorror\n5665\n3\n0.0530%\n\n\n2020\nMusic\n1063\n7\n0.6585%\n\n\n2020\nMusical\n335\n1\n0.2985%\n\n\n2020\nMystery\n2870\n13\n0.4530%\n\n\n2020\nRomance\n4619\n14\n0.3031%\n\n\n2020\nSci-Fi\n1561\n11\n0.7047%\n\n\n2020\nSport\n814\n2\n0.2457%\n\n\n2020\nThriller\n6728\n20\n0.2973%\n\n\n2020\nWar\n534\n3\n0.5618%\n\n\n2020\n\n106\n1\n0.9434%\n\n\n\n\n\n‘4.4 Action as genre has become more popular for successful movies moving from 2% in the 1950s to 14% in the 2020s so has seen a considerable rise’\n‘Overall I would personally target an adventure movie although not appearing anywhere in these metrics, it tends to have one of the highest percentage success across all movies above 2% of all adventure movies made’\n‘Task 5’\n\nActor_success&lt;- Successful_Movies |&gt;\n        filter(Success_measure &gt;= 10) |&gt;\n        separate_longer_delim(genres, \",\")|&gt;\n        filter(genres == \"Adventure\") |&gt;\n        inner_join(NAME_BASICS |&gt;\n                   separate_longer_delim(primaryProfession, \",\")|&gt;\n                   separate_longer_delim(knownForTitles, \",\")|&gt; \n                   filter(primaryProfession == \"director\"|primaryProfession == \"actor\")|&gt;\n                   select(knownForTitles,primaryName,birthYear,primaryProfession),\n                   join_by(tconst == knownForTitles)) |&gt;\n        group_by(primaryName,primaryProfession,startYear,birthYear) |&gt;\n        summarize(number_of_successful_movies = n(),Number_of_Votes = sum(numVotes,na.rm = FALSE),Average_rating = mean(averageRating)) |&gt;\n        filter(!is.na(birthYear))|&gt;\n        arrange(desc(number_of_successful_movies))\n\n`summarise()` has grouped output by 'primaryName', 'primaryProfession',\n'startYear'. You can override using the `.groups` argument.\n\nkable(Actor_success |&gt;\n        group_by(primaryName,primaryProfession,birthYear) |&gt;\n        summarize(Successes = sum(number_of_successful_movies,na.rm = FALSE))|&gt;\n        arrange(desc(Successes))|&gt;\n        rename(Name = primaryName, Profession = primaryProfession)|&gt;\n        head(100),align = \"l\")\n\n`summarise()` has grouped output by 'primaryName', 'primaryProfession'. You can\noverride using the `.groups` argument.\n\n\n\n\n\nName\nProfession\nbirthYear\nSuccesses\n\n\n\n\n‘Chico’ Hernandez\nactor\n1958\n4\n\n\n‘Chico’ Hernandez\ndirector\n1958\n4\n\n\nAaron Blaise\ndirector\n1968\n4\n\n\nAaron C. Fitzgerald\nactor\n1978\n4\n\n\nAaron Fors\nactor\n1989\n4\n\n\nAaron Kozak\nactor\n1983\n4\n\n\nAdam Austin\nactor\n1965\n4\n\n\nAdam Brown\nactor\n1980\n4\n\n\nAdam J. Ely\nactor\n1979\n4\n\n\nAdam May\ndirector\n1979\n4\n\n\nAdriano Cirulli\ndirector\n1973\n4\n\n\nAidan Turner\nactor\n1983\n4\n\n\nAkihiro Tomikawa\nactor\n1968\n4\n\n\nAkira Kushida\nactor\n1948\n4\n\n\nAl Matthews\nactor\n1942\n4\n\n\nAl Zinnen\nactor\n1903\n4\n\n\nAlan Lee\nactor\n1947\n4\n\n\nAlan Ritchson\nactor\n1982\n4\n\n\nAlan Ritchson\ndirector\n1982\n4\n\n\nAlbert R. Broccoli\nactor\n1909\n4\n\n\nAlbert Uderzo\nactor\n1927\n4\n\n\nAlbert Uderzo\ndirector\n1927\n4\n\n\nAlbie Woodington\nactor\n1952\n4\n\n\nAlec Mills\ndirector\n1932\n4\n\n\nAleksandr Kraevskiy\nactor\n1980\n4\n\n\nAles Kosnar\nactor\n1972\n4\n\n\nAlex Cannon\ndirector\n1977\n4\n\n\nAlex McCormack\nactor\n1985\n4\n\n\nAlfred Enoch\nactor\n1988\n4\n\n\nAllen Jo\nactor\n1977\n4\n\n\nAlvaro Zendejas\ndirector\n1983\n4\n\n\nAmit Soni\nactor\n1982\n4\n\n\nAmy Eglen\ndirector\n1993\n4\n\n\nAmy Johnston\ndirector\n1990\n4\n\n\nAndrew Adamson\ndirector\n1966\n4\n\n\nAndrew Harvey\ndirector\n1981\n4\n\n\nAndrew Jack\nactor\n1944\n4\n\n\nAndrew Lesnie\nactor\n1956\n4\n\n\nAndrew Stanton\nactor\n1965\n4\n\n\nAndrew Tamandl\ndirector\n1968\n4\n\n\nAngelo Ragusa\nactor\n1952\n4\n\n\nAnthony Daniels\nactor\n1946\n4\n\n\nAnthony Russo\ndirector\n1970\n4\n\n\nAntonio Funaro\nactor\n1982\n4\n\n\nAntonio Molina\nactor\n1954\n4\n\n\nAri Ross\ndirector\n1979\n4\n\n\nArnold Vosloo\nactor\n1962\n4\n\n\nArt Stevens\ndirector\n1915\n4\n\n\nArthur Max\nactor\n1946\n4\n\n\nAsher Blinkoff\nactor\n2008\n4\n\n\nAssis Eloy\nactor\n1985\n4\n\n\nAttila Illés\nactor\n1988\n4\n\n\nBarry Blanchard\nactor\n1959\n4\n\n\nBarry R. Koper\nactor\n1955\n4\n\n\nBeau Brasseaux\nactor\n1989\n4\n\n\nBen Collins\nactor\n1975\n4\n\n\nBenedict Wong\nactor\n1970\n4\n\n\nBernard Bresslaw\nactor\n1934\n4\n\n\nBernard Lee\nactor\n1908\n4\n\n\nBill Roberts\ndirector\n1899\n4\n\n\nBill Thompson\nactor\n1913\n4\n\n\nBilly Dee Williams\nactor\n1937\n4\n\n\nBob Anderson\nactor\n1922\n4\n\n\nBob Barlen\ndirector\n1980\n4\n\n\nBob Carlson\ndirector\n1906\n4\n\n\nBob Gale\ndirector\n1951\n4\n\n\nBob Mano\nactor\n1955\n4\n\n\nBob Peterson\nactor\n1961\n4\n\n\nBob Simmons\nactor\n1922\n4\n\n\nBobby Block\nactor\n1991\n4\n\n\nBogdan Draghici\ndirector\n1982\n4\n\n\nBonnie Wright\ndirector\n1991\n4\n\n\nBrad Abrell\nactor\n1965\n4\n\n\nBrad Heiner\nactor\n1964\n4\n\n\nBrad Jeffries\nactor\n1960\n4\n\n\nBradley Everett Wilson\ndirector\n1980\n4\n\n\nBrent Spiner\nactor\n1949\n4\n\n\nBrent Spiner\ndirector\n1949\n4\n\n\nBrian Goldner\nactor\n1963\n4\n\n\nBrian M. Rosen\nactor\n1971\n4\n\n\nBrian Magner\nactor\n1978\n4\n\n\nBrian Mainolfi\ndirector\n1971\n4\n\n\nBrock Little\nactor\n1967\n4\n\n\nBruno Mars\nactor\n1985\n4\n\n\nBryan Adams\nactor\n1959\n4\n\n\nBryon Weiss\nactor\n1963\n4\n\n\nBryon Weiss\ndirector\n1963\n4\n\n\nC. Andrew Nelson\nactor\n1962\n4\n\n\nCal Brunker\ndirector\n1978\n4\n\n\nCan Bolat\nactor\n1998\n4\n\n\nCarlos Saldanha\ndirector\n1965\n4\n\n\nChad Sellers\nactor\n1982\n4\n\n\nCharles Haugk\nactor\n1953\n4\n\n\nChris Antonini\nactor\n1977\n4\n\n\nChris Buck\ndirector\n1958\n4\n\n\nChris Cason\nactor\n1974\n4\n\n\nChris Clarke\nactor\n1977\n4\n\n\nChris Cossey\nactor\n1984\n4\n\n\nChris Daniels\nactor\n1976\n4\n\n\nChris Dawson\nactor\n1965\n4\n\n\n\n\nkable(Actor_success |&gt;\n        group_by(primaryName,primaryProfession,birthYear) |&gt;\n        summarize(Successes = sum(number_of_successful_movies,na.rm = FALSE))|&gt;\n        filter(birthYear &gt;= 1990) |&gt;\n        arrange(desc(Successes))|&gt;\n        rename(Name = primaryName, Profession = primaryProfession)|&gt;\n        head(100),align = \"l\")\n\n`summarise()` has grouped output by 'primaryName', 'primaryProfession'. You can\noverride using the `.groups` argument.\n\n\n\n\n\nName\nProfession\nbirthYear\nSuccesses\n\n\n\n\nAmy Eglen\ndirector\n1993\n4\n\n\nAmy Johnston\ndirector\n1990\n4\n\n\nAsher Blinkoff\nactor\n2008\n4\n\n\nBobby Block\nactor\n1991\n4\n\n\nBonnie Wright\ndirector\n1991\n4\n\n\nCan Bolat\nactor\n1998\n4\n\n\nDaniel Pentkowski\nactor\n1991\n4\n\n\nDavid De Juan\ndirector\n1990\n4\n\n\nElliott Cattell\ndirector\n1991\n4\n\n\nGeorge Redstone\ndirector\n2000\n4\n\n\nIvan Sorgente\nactor\n1993\n4\n\n\nJackey Mishra\nactor\n1998\n4\n\n\nJacob Batalon\nactor\n1996\n4\n\n\nJohn Boyega\nactor\n1992\n4\n\n\nJosh Hutcherson\nactor\n1992\n4\n\n\nJosh Hutcherson\ndirector\n1992\n4\n\n\nKanata Hongô\nactor\n1990\n4\n\n\nLiam Hemsworth\nactor\n1990\n4\n\n\nLuke Scott\nactor\n1994\n4\n\n\nMathew Yanagiya\nactor\n1990\n4\n\n\nRicky Arietta\ndirector\n1991\n4\n\n\nShu Watanabe\nactor\n1991\n4\n\n\nSôta Fukushi\nactor\n1993\n4\n\n\nTrey Brown\nactor\n1993\n4\n\n\nViolet Columbus\ndirector\n1994\n4\n\n\nWilliam Melling\nactor\n1994\n4\n\n\nAaron Dismuke\nactor\n1992\n3\n\n\nAjay Lobo\nactor\n1997\n3\n\n\nAleks Le\nactor\n1999\n3\n\n\nAlex R. Wagner\ndirector\n1991\n3\n\n\nAlexander Canton\nactor\n1995\n3\n\n\nAmaan Shaikh\nactor\n2000\n3\n\n\nAnastasia Zabarchuk\ndirector\n1997\n3\n\n\nArchie Renaux\nactor\n1997\n3\n\n\nArvind Kashyap\nactor\n1992\n3\n\n\nBart the Bear\nactor\n2000\n3\n\n\nBehnam Taheri\ndirector\n1990\n3\n\n\nBilly Jackson\nactor\n1995\n3\n\n\nBooboo Stewart\nactor\n1994\n3\n\n\nBrayden Patterson\nactor\n1992\n3\n\n\nChandler Frantz\nactor\n1998\n3\n\n\nChristopher Painter\nactor\n1992\n3\n\n\nCody Simpson\nactor\n1997\n3\n\n\nCody Simpson\ndirector\n1997\n3\n\n\nCooper Cowgill\nactor\n1995\n3\n\n\nDaryl Sabara\nactor\n1992\n3\n\n\nDavide Anselmi\ndirector\n1999\n3\n\n\nDonte Paris\nactor\n1998\n3\n\n\nEdouard Calemard\ndirector\n1992\n3\n\n\nElan Garfias\nactor\n1999\n3\n\n\nElias Mlayeh\nactor\n1991\n3\n\n\nFinneas O’Connell\nactor\n1997\n3\n\n\nGeorgie Henley\ndirector\n1995\n3\n\n\nGianni Biasetti Jr.\nactor\n1992\n3\n\n\nHarry Holland\nactor\n1999\n3\n\n\nHarry Holland\ndirector\n1999\n3\n\n\nHayato Onozuka\nactor\n1993\n3\n\n\nIan Chen\nactor\n2006\n3\n\n\nIzaac Wang\nactor\n2007\n3\n\n\nJack Millar\ndirector\n1991\n3\n\n\nJacob Bertrand\nactor\n2000\n3\n\n\nJacob Bertrand\ndirector\n2000\n3\n\n\nJacob Lofland\nactor\n1996\n3\n\n\nJacob Smith\nactor\n1990\n3\n\n\nJake Cherry\nactor\n1996\n3\n\n\nJohn Bell\nactor\n1997\n3\n\n\nJordan Fry\nactor\n1993\n3\n\n\nJoshua R. Jones\nactor\n1990\n3\n\n\nJustice Smith\nactor\n1995\n3\n\n\nKai Lydgate\nactor\n1992\n3\n\n\nKhaled Elkodosy\nactor\n2001\n3\n\n\nKristen Stewart\ndirector\n1990\n3\n\n\nLance Breakwell\nactor\n1993\n3\n\n\nMarvin Jaacks\nactor\n1996\n3\n\n\nMax Charles\nactor\n2003\n3\n\n\nMelody Wayfare\ndirector\n1994\n3\n\n\nMichaela Jill Murphy\ndirector\n1994\n3\n\n\nMustard\nactor\n1990\n3\n\n\nNaomi Scott\ndirector\n1993\n3\n\n\nNathan Velasquez\nactor\n1996\n3\n\n\nNiall Horn\ndirector\n1997\n3\n\n\nNicholas Bird\nactor\n1994\n3\n\n\nNikita Hopkins\nactor\n1991\n3\n\n\nOmar Fathy Saber\nactor\n1998\n3\n\n\nPeregrine Kitchener-Fellowes\nactor\n1991\n3\n\n\nPeter Varnai\ndirector\n1991\n3\n\n\nReed Buck\nactor\n1994\n3\n\n\nRofique Khan\nactor\n1997\n3\n\n\nRoss Simanteris\nactor\n1994\n3\n\n\nRyan Cunningham\ndirector\n1990\n3\n\n\nRyunosuke Kamiki\nactor\n1993\n3\n\n\nRyô Yoshizawa\nactor\n1994\n3\n\n\nScotty Cook\nactor\n1991\n3\n\n\nShameik Moore\nactor\n1995\n3\n\n\nShane Baumel\nactor\n1997\n3\n\n\nShôma Kai\nactor\n1997\n3\n\n\nSkandar Keynes\nactor\n1991\n3\n\n\nSo Okuno\nactor\n2000\n3\n\n\nSwae Lee\nactor\n1993\n3\n\n\nTake That\nactor\n1990\n3\n\n\n\n\n\nI will select James Cameron as the director given his experience in the industry and successful performance and Orlando Bloom who had successes in Lord of the rings and Liam Hemsworth who has had vast experience in the industry and an already created persona.\n\nggplot(Actor_success |&gt;\n                 mutate(Decade = floor(startYear/10)*10) |&gt;\n                 group_by(Decade,primaryName) |&gt;\n                 filter(primaryName == \"James Cameron\"|primaryName == \"Orlando Bloom\"|primaryName == \"Liam Hemsworth\") |&gt;\n                 summarize(Number_of_Votes = mean(Number_of_Votes))\n               , aes(x = Decade, y = Number_of_Votes,group = primaryName,colour = primaryName)) +\n          geom_bar(stat=\"Identity\") +\n          labs(title = \"Number of Adventure Movies by Decade\") +\n          xlab(\"Year\") +\n          ylab(\"Number of Votes\") +\n          scale_x_continuous(breaks = seq(1920, 2020, by = 10), labels = paste0(seq(1920, 2020, by = 10), \"s\")) +\n          ggtitle(label = \"Number of Advenutre movies votes by Year\")\n\n`summarise()` has grouped output by 'Decade'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nNow is the perfect time for you three to team up and make an attempt to recapture the nostalgic market, during your peak times 2000s and 2010s, you were very successful particularly in the adventure category and have all had exposure to the movie category. The decline in votes is common across the industry and is waiting for a revival, similar to what you did back in 2000s.\n\nggplot(TITLE_RATINGS|&gt;\n                  inner_join(TITLE_BASICS |&gt;\n                               separate_longer_delim(genres, \",\")|&gt;\n                               filter(genres == \"Adventure\") |&gt;\n                               filter(titleType == \"movie\") |&gt;\n                               select(tconst,startYear),join_by(tconst == tconst)) |&gt;\n                  mutate(Decade = floor(startYear/10)*10) |&gt;\n                  group_by(Decade) |&gt;\n                  summarize(Number_of_Votes = mean(numVotes))\n                , aes(x = Decade, y = Number_of_Votes)) +\n           geom_line() +\n           labs(title = \"Number of Adventure Movies by Decade\") +\n           xlab(\"Year\") +\n           ylab(\"Number of Votes\") +\n           scale_x_continuous(breaks = seq(1920, 2020, by = 10), labels = paste0(seq(1920, 2020, by = 10), \"s\")) +\n           ggtitle(label = \"Number of Advenutre movies votes by Year\")\n\n\n\n\n\n\n\n\nTask 6\n\nkable(TITLE_RATINGS|&gt;\n  inner_join(TITLE_BASICS |&gt;\n               separate_longer_delim(genres, \",\")|&gt;\n               filter(genres == \"Adventure\") |&gt;\n               filter(titleType == \"movie\") |&gt;\n               select(tconst,startYear,primaryTitle),join_by(tconst == tconst)) |&gt;\n    filter(numVotes&gt;=100000) |&gt;\n    filter(startYear &lt;= 1999) |&gt;\n    filter(startYear &gt;= 1985) |&gt;\n    select(-tconst) |&gt;\n    filter(averageRating &gt;=7.0) |&gt;\n    rename(Rating = averageRating, 'Number of votes' = numVotes, Title = primaryTitle, Year = startYear,'Success measure'=Success_measure),align = \"l\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nRating\nNumber of votes\nSuccess measure\nYear\nTitle\n\n\n\n\n8.5\n1338094\n15\n1985\nBack to the Future\n\n\n7.7\n304938\n14\n1985\nThe Goonies\n\n\n8.4\n787933\n14\n1986\nAliens\n\n\n7.2\n157263\n13\n1986\nBig Trouble in Little China\n\n\n7.0\n150140\n13\n1986\nHighlander\n\n\n7.3\n153326\n13\n1986\nLabyrinth\n\n\n8.1\n451763\n14\n1986\nStand by Me\n\n\n8.0\n186529\n14\n1986\nCastle in the Sky\n\n\n7.8\n466089\n14\n1987\nPredator\n\n\n8.0\n457779\n14\n1987\nThe Princess Bride\n\n\n7.1\n211171\n13\n1987\nSpaceballs\n\n\n7.4\n100905\n13\n1988\nThe Land Before Time\n\n\n7.7\n220879\n14\n1988\nWho Framed Roger Rabbit\n\n\n7.2\n131613\n13\n1988\nWillow\n\n\n7.5\n197562\n14\n1989\nThe Abyss\n\n\n7.8\n584607\n14\n1989\nBack to the Future Part II\n\n\n7.5\n412097\n14\n1989\nBatman\n\n\n8.2\n822658\n14\n1989\nIndiana Jones and the Last Crusade\n\n\n7.6\n295670\n14\n1989\nThe Little Mermaid\n\n\n7.4\n490163\n13\n1990\nBack to the Future Part III\n\n\n8.0\n296111\n14\n1990\nDances with Wolves\n\n\n7.5\n218647\n14\n1990\nThe Hunt for Red October\n\n\n7.5\n360557\n14\n1990\nTotal Recall\n\n\n8.6\n1198743\n16\n1991\nTerminator 2: Judgment Day\n\n\n7.6\n177729\n14\n1991\nThelma & Louise\n\n\n8.0\n477950\n14\n1992\nAladdin\n\n\n7.7\n105517\n14\n1992\nPorco Rosso\n\n\n7.6\n192146\n14\n1992\nThe Last of the Mohicans\n\n\n7.0\n115846\n13\n1993\nCool Runnings\n\n\n8.2\n1089950\n15\n1993\nJurassic Park\n\n\n8.5\n1167510\n15\n1994\nThe Lion King\n\n\n7.0\n120889\n13\n1994\nMaverick\n\n\n7.3\n399613\n13\n1994\nSpeed\n\n\n7.0\n208702\n13\n1994\nStargate\n\n\n7.7\n320610\n14\n1995\nApollo 13\n\n\n7.5\n104440\n14\n1995\nDead Man\n\n\n7.6\n413328\n14\n1995\nDie Hard with a Vengeance\n\n\n7.2\n273448\n13\n1995\nGoldenEye\n\n\n7.1\n385728\n13\n1995\nJumanji\n\n\n8.3\n1091017\n15\n1995\nToy Story\n\n\n7.0\n616988\n13\n1996\nIndependence Day\n\n\n7.2\n478320\n13\n1996\nMission: Impossible\n\n\n7.4\n363692\n13\n1996\nThe Rock\n\n\n7.6\n133508\n14\n1996\nStar Trek: First Contact\n\n\n7.1\n138489\n13\n1997\nAnastasia\n\n\n7.0\n261389\n13\n1997\nAustin Powers: International Man of Mystery\n\n\n7.6\n516157\n14\n1997\nThe Fifth Element\n\n\n7.3\n260900\n13\n1997\nHercules\n\n\n7.3\n625000\n13\n1997\nMen in Black\n\n\n8.3\n444748\n14\n1997\nPrincess Mononoke\n\n\n7.1\n158630\n13\n1997\nSeven Years in Tibet\n\n\n7.1\n182406\n13\n1999\nThree Kings\n\n\n7.3\n328112\n13\n1997\nStarship Troopers\n\n\n7.9\n631324\n14\n1999\nToy Story 2\n\n\n7.1\n471238\n13\n1999\nThe Mummy\n\n\n7.2\n320135\n13\n1998\nA Bug’s Life\n\n\n7.3\n231450\n13\n1999\nDogma\n\n\n7.5\n305740\n14\n1998\nFear and Loathing in Las Vegas\n\n\n7.7\n323586\n14\n1998\nMulan\n\n\n7.2\n149896\n13\n1998\nThe Prince of Egypt\n\n\n7.3\n252688\n13\n1999\nTarzan\n\n\n8.1\n234826\n14\n1999\nThe Iron Giant\n\n\n7.4\n181820\n13\n1999\nGalaxy Quest\n\n\n\n\n\nThe Movie I have selected to recreate would be to produce a Dead Man sequel, with anew cast however I think would be interesting for Jim Jarmusch as the original director to provide his creative feedback, and insight and Johnny Depp as the primary actor from the original to provide consultative services on it.\nTask 7\n’Pitch:\nWhy This Project?\n\nReviving a Classic: Dead Man remains a cult classic, and a sequel would tap into a passionate fanbase.\nProven Talent: Orlando Bloom iconic performance and James Camerons visionary directing skills aswell as longevity being successful across decades offer a strong foundation. Particularly during the 2000’s around when Dead Man first released.\nRising Star: Liam Hemsworth, a proven action star, adds a contemporary appeal. Adventure Renaissance:\nAdventure films have enjoyed a resurgence and growth in popularity up around 200-500% over the past 30-40 years, with audiences craving escapism and thrilling narratives.\nNostalgia and Innovation: The film can blend nostalgia for the original with modern storytelling techniques, creating a fresh and exciting experience.’\n\nClassic 90’s style teaser\nFrom director James Cameron, the visionary mind behind Avatar; and From actor Orlando Bloom, beloved star of Lord of the Rings; and From Liam Hemsworth, Hollywood icon of Adventure, Comes the timeless tail Dead Mans Return A story of Legacy and Redemption, The Changing West, and The Power of Friendship Coming soon to a theater near you."
  }
]